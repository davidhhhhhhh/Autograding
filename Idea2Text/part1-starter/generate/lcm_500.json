[
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a*b/b1;\n    return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a*b/b1;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a*b/b1;\n    return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a*b/b1;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a*b/b1;\n    return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a*b/b1;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a*b/b1;\n    return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a*b/b1;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    if (r == 0) return r;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/(gcd(a,b)*b);\n            return output;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "output =  a/(gcd(a,b)*b);\n            return output;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b) % gcd(a,b);\n    return c;",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a*b/b1;\n    return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a*b/b1;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "int c = 0;\n    c = (a*b)/ gcd(a,b);\n    return c;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){\n        if(a < b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n        r = a % b;\n        if(r != 0){\n        a = b;\n        b = r;\n        }\n    }\n    int x=a1*b1/b;\n    return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1=a;\n    int b1=b;\n    int r=1;\n    while(r > 0){{\n        if(a < b){{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n        r = a % b;\n        if(r != 0){{\n        a = b;\n        b = r;\n        }}\n    }}\n    int x=a1*b1/b;\n    return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    output =  a/gcd(a,b)*b;\n            return output;\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "output =  a/gcd(a,b)*b;\n            return output;",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return a;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return a;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)/gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": " return (a*b)/gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) return gcd(b, a);\n    int r = a % b;\n    if (r == 0) return b;\n    else return gcd(r, b);"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b - gcd(a,b);\n}\n\nint gcd(int a, int b){\n    int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {\n                tmp = a;\n                a = b;\n                b = tmp;\n        }\n        //Find the gcd\n        while(b != 0)\n        {\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }\n        return b;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": "return a*b - gcd(a,b);",
            "gcdPart": "int tmp;\n        //Swap the numbers so a >= b\n        if(a < b)\n        {{\n                tmp = a;\n                a = b;\n                b = tmp;\n        }}\n        //Find the gcd\n        while(b != 0)\n        {{\n                tmp = a % b;\n                a = b;\n                b = tmp;\n        }}\n        return b;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n     return (a*b)*gcd(a,b);\n}\n\nint gcd(int a, int b){\n    \n    int r = a % b;\n\n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartIncorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartIncorrect}\n}}",
            "lcmPart": " return (a*b)*gcd(a,b);",
            "gcdPart": "\n    int r = a % b;\n\n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b1/b;\n            return x;\n}",
        "choices": {
            "correctness": "false",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionIncorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b1/b;\n            return x;"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    return a*b / gcd(a,b);\n}\n\nint gcd(int a, int b){\n    if (a < b) {\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }\n    int r = a % b;\n    \n    if (r == 0) {\n        return b;\n    } else {\n        return gcd(r, b);\n    }\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {LcmPartCorrect}\n}}\n\nint gcd(int a, int b){{\n    {GcdPartCorrect}\n}}",
            "lcmPart": "return a*b / gcd(a,b);",
            "gcdPart": "if (a < b) {{\n        int tmp = a;\n        a = b;\n        b = tmp;\n    }}\n    int r = a % b;\n    \n    if (r == 0) {{\n        return b;\n    }} else {{\n        return gcd(r, b);\n    }}"
        }
    },
    {
        "text": "int lcm(int a, int b) {\n    int a1 = a;\n            int b1 = b;\n            if (a < b) {\n            a1 = b; \n            b1 = a;}\n            int r = a1 % b1;\n            while (r != 0) {\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}\n            int x=a*b/b1;\n            return x;\n}",
        "choices": {
            "correctness": "correct",
            "codeStructure": "int lcm(int a, int b) {{\n    {OneFunctionCorrect}\n}}",
            "OneFunction": "int a1 = a;\n            int b1 = b;\n            if (a < b) {{\n            a1 = b; \n            b1 = a;}}\n            int r = a1 % b1;\n            while (r != 0) {{\n            a1 = b1; \n            b1 = r;\n            r = a1 % b1;}}\n            int x=a*b/b1;\n            return x;"
        }
    }
]